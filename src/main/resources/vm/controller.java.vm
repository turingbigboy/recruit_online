package com.yyjj.api.controller;
import java.util.ArrayList;
import java.util.List;
import java.util.Objects;

import com.yyjj.db.model.${model};
import com.yyjj.api.vo.${model}VO;
import com.yyjj.service.service.${model}Service;
import com.yyjj.domain.context.AjaxResult;
import com.yyjj.domain.service.BasePage;

import com.baomidou.mybatisplus.core.conditions.query.QueryWrapper;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.util.CollectionUtils;
import org.springframework.validation.annotation.Validated;
import org.springframework.web.bind.annotation.DeleteMapping;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.PutMapping;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RestController;


/**
 * ${model}
 * @author yml
 *
 */
@SuppressWarnings("unchecked")
@RestController
@RequestMapping("/${lowerModel}")
public class ${model}Controller {
		
	@Autowired
	${model}Service ${lowerModel}Service;
	
	/**
	 * ${controllerName}
	 * @param vo
	 * @return
	 */
	@GetMapping
	public AjaxResult<${model}VO> listBasePage(${model}VO vo){
		return AjaxResult.success("",${lowerModel}Service.listPage(new QueryWrapper<${model}>(vo.convert())).converterAll(this::convert));
	}
	
	/**
	 *${controllerName}
	 * @param id ${model}id
	 * @return
	 */
	@GetMapping("/{id:\\d+}")
	public AjaxResult<${model}VO> Detail(@PathVariable Integer id) {		
		return AjaxResult.success("",convert(${lowerModel}Service.getById(id)));
	}
	
	
	/**
	 * ${model}
	 * @param vo
	 * @return
	 * 
	 */
	@PostMapping
	public AjaxResult<${model}VO> add(@RequestBody @Validated ${model}VO vo) {
		boolean result = ${lowerModel}Service.save(vo.convert());
		if(result) {
			return AjaxResult.success("新增成功");
		}
		
		return AjaxResult.failed("新增失败");	
	}
	
	/**
	 * ${model}
	 * @param vo
	 * @return
	 * 
	 */
	@PutMapping
	public AjaxResult<${model}VO> modify(@RequestBody @Validated ${model}VO vo) {
		boolean result = ${lowerModel}Service.updateById(vo.convert());
		if(result) {
			return AjaxResult.success("修改成功");
		}
		
		return AjaxResult.failed("修改失败");	
	}
	
	/**
	 * ${model}
	 * @param id
	 */
	@DeleteMapping("/{id:\\d+}")
	public AjaxResult<Boolean> remove(@PathVariable Integer id) {
		boolean result = ${lowerModel}Service.removeById(id);
		if(result) {
			return AjaxResult.success("删除成功");
		}
		return AjaxResult.failed("删除失败");
	}
	
	private BasePage<${model}VO> convert(BasePage<${model}> basePage) {
		List<${model}VO> resultList = new ArrayList<${model}VO>();
					
		for (${model} ${lowerModel} : basePage.getRecords()) {
			resultList.add(convert(${lowerModel}));
		}
		BasePage<${model}VO> result = new BasePage<${model}VO>(basePage.getPage(),
				basePage.getPageSize(), basePage.getCurrent(), basePage.getTotal(), resultList);
		return result;
	}
	private ${model}VO convert(${model} ${lowerModel}){
			${model}VO vo = ${model}VO.newInstance(${lowerModel});
			//TODO
			return vo;
	}
	
}
